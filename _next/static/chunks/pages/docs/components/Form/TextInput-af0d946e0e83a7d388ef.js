_N_E=(window.webpackJsonp_N_E=window.webpackJsonp_N_E||[]).push([[32],{aH4p:function(e,n,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/docs/components/Form/TextInput",function(){return t("ddJL")}])},ddJL:function(e,n,t){"use strict";t.r(n),t.d(n,"default",(function(){return i}));var l=t("wx14"),a=t("Ff2n"),o=t("q1tI"),c=t.n(o),r=t("7ljp"),p=t("9Xuy"),s=(c.a.createElement,{});function i(e){var n=e.components,t=Object(a.a)(e,["components"]);return Object(r.b)("wrapper",Object(l.a)({},s,t,{components:n,mdxType:"MDXLayout"}),Object(r.b)(p.c,{title:"TextInput",mdxType:"Meta"}),Object(r.b)("h1",null,"TextInput"),Object(r.b)(p.a,{of:"TextInput",mdxType:"Description"}),Object(r.b)("h2",null,"Props"),Object(r.b)(p.d,{of:"TextInput",mdxType:"Props"}),Object(r.b)("h2",null,"Examples"),Object(r.b)("h3",null,"Basic"),Object(r.b)("p",null,"A basic usage of TextInput."),Object(r.b)("pre",null,Object(r.b)("code",Object(l.a)({parentName:"pre"},{className:"language-js",metastring:"live",live:!0}),'<TextInput placeholder="Type here...">\n  Children are placed under the input.\n</TextInput>\n')),Object(r.b)("h3",null,"Disabled"),Object(r.b)("p",null,"Text inputs can be disabled."),Object(r.b)("pre",null,Object(r.b)("code",Object(l.a)({parentName:"pre"},{className:"language-js",metastring:"live",live:!0}),'<>\n  <Row gutter={1}>\n    <Col>\n      <TextInput disabled value="Disabled" />\n    </Col>\n    <Col>\n      <TextInput readOnly value="Read Only" />\n    </Col>\n  </Row>\n</>\n')),Object(r.b)("h3",null,"Loading"),Object(r.b)("p",null,"TextInputs can have a loading state."),Object(r.b)("pre",null,Object(r.b)("code",Object(l.a)({parentName:"pre"},{className:"language-js",metastring:"live withRender",live:!0,withRender:!0}),"// import { tag } from 'icon-packs/feather';\n\nconst Example = () => {\n  const [loading, setLoading] = useState(false);\n  const [value, setValue] = useState('');\n  const to = useRef();\n\n  const onChange = (ev) => {\n    clearTimeout(to.current);\n    setLoading(true);\n    setValue(ev.target.value);\n    to.current = setTimeout(() => {\n      setLoading(false);\n    }, 3000);\n  };\n\n  return (\n    <TextInput\n      iconRight={tag}\n      loading={loading}\n      onChange={onChange}\n      placeholder=\"Start typing to toggle loading state...\"\n      value={value}\n    />\n  );\n};\n\nrender(<Example />);\n")),Object(r.b)("h3",null,"Icons"),Object(r.b)("p",null,"Text inputs can have icons on both sides."),Object(r.b)("pre",null,Object(r.b)("code",Object(l.a)({parentName:"pre"},{className:"language-js",metastring:"live",live:!0}),'// import { tag, check } from \'icon-packs/feather\';\n\n<Row gutter={1}>\n  <Col>\n    <TextInput icon={tag} placeholder="left" />\n  </Col>\n  <Col>\n    <TextInput icon={tag} iconRight={check} placeholder="both" />\n  </Col>\n  <Col>\n    <TextInput iconRight={check} placeholder="right" />\n  </Col>\n</Row>\n')),Object(r.b)("h3",null,"Right Element"),Object(r.b)("p",null,"A Text input can have an element on the right."),Object(r.b)("pre",null,Object(r.b)("code",Object(l.a)({parentName:"pre"},{className:"language-js",metastring:"live",live:!0}),'// import { helpCircle } from \'icon-packs/feather\';\n\n<TextInput\n  placeholder="Right Element"\n  rightElement={<Button icon={helpCircle} buttonType="link" />}\n/>\n')),Object(r.b)("h3",null,"Size"),Object(r.b)("p",null,"Text inputs can have different sizes."),Object(r.b)("pre",null,Object(r.b)("code",Object(l.a)({parentName:"pre"},{className:"language-js",metastring:"live",live:!0}),'// import { user } from \'icon-packs/feather\';\n\n<Row gutter={1}>\n  <Col span={12}>\n    <TextInput icon={user} size="sm" placeholder="sm" />\n  </Col>\n  <Col span={12}>\n    <TextInput size="sm" placeholder="sm" />\n  </Col>\n  <Col span={12}>\n    <TextInput icon={user} size="md" placeholder="md" />\n  </Col>\n  <Col span={12}>\n    <TextInput size="md" placeholder="md" />\n  </Col>\n  <Col span={12}>\n    <TextInput icon={user} size="lg" placeholder="lg" />\n  </Col>\n  <Col span={12}>\n    <TextInput size="lg" placeholder="lg" />\n  </Col>\n</Row>\n')),Object(r.b)("h3",null,"Error"),Object(r.b)("p",null,"A text input can indicate it has an error."),Object(r.b)("pre",null,Object(r.b)("code",Object(l.a)({parentName:"pre"},{className:"language-js",metastring:"live",live:!0}),'// import { x } from \'icon-packs/feather\';\n\n<Row gutter={1}>\n  <Col span={12}>\n    <TextInput hasError placeholder="Error..." iconRight={x} />\n  </Col>\n  <Col span={12}>\n    <TextInput hasError placeholder="Error input">\n      Text indicating error\n    </TextInput>\n  </Col>\n</Row>\n')),Object(r.b)("h2",null,"Design Guidelines"),Object(r.b)(p.b,{do:["Use TextInput to get data input from a user.","Make use of a label when possible otherwise set aria-label."],dont:["Use TextInput in an inaccessible way for screen readers.","Use TextInput when a more appropriate component like PasswordInput could be used."],mdxType:"DoDont"}))}i.isMDXComponent=!0}},[["aH4p",0,1,7,5,8,6,2,3,4,9]]]);