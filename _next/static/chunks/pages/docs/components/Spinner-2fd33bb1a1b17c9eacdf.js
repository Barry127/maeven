_N_E=(window.webpackJsonp_N_E=window.webpackJsonp_N_E||[]).push([[59],{"R3+I":function(n,e,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/docs/components/Spinner",function(){return t("Wsmy")}])},Wsmy:function(n,e,t){"use strict";t.r(e),t.d(e,"default",(function(){return c}));var r=t("wx14"),o=t("Ff2n"),i=t("q1tI"),l=t.n(i),a=t("7ljp"),s=t("9Xuy"),p=(l.a.createElement,{});function c(n){var e=n.components,t=Object(o.a)(n,["components"]);return Object(a.b)("wrapper",Object(r.a)({},p,t,{components:e,mdxType:"MDXLayout"}),Object(a.b)(s.c,{title:"Spinner",mdxType:"Meta"}),Object(a.b)("h1",null,"Spinner"),Object(a.b)(s.a,{of:"Spinner",mdxType:"Description"}),Object(a.b)("h2",null,"Props"),Object(a.b)(s.d,{of:"Spinner",mdxType:"Props"}),Object(a.b)("h2",null,"Examples"),Object(a.b)("h3",null,"Basic"),Object(a.b)("p",null,"A basic usage of Spinner."),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-js",metastring:"live",live:!0}),"<Spinner />\n")),Object(a.b)("h3",null,"Text"),Object(a.b)("p",null,"A spinner can have text."),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-js",metastring:"live",live:!0}),'<Spinner text="Loading data..." />\n')),Object(a.b)("h3",null,"Sizes"),Object(a.b)("p",null,"Spinners can have different sizes."),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-js",metastring:"live",live:!0}),'<Row gutter={1}>\n  <Col span={24}>\n    <Spinner size="1em" text="1em" />\n  </Col>\n  <Col span={24}>\n    <Spinner size="2em" text="2em" />\n  </Col>\n  <Col span={24}>\n    <Spinner size="3em" text="3em" />\n  </Col>\n  <Col span={24}>\n    <Spinner size={96} text="96px" />\n  </Col>\n</Row>\n')),Object(a.b)("h3",null,"Color"),Object(a.b)("p",null,"Spinners can be styled in different (theme) colors."),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-js",metastring:"live",live:!0}),'<div style={{ columns: \'4 auto\' }}>\n  <Spinner color="black" text="Black" />\n  <Spinner color="white" text="White" />\n  <Spinner color="darkGrey" text="DarkGrey" />\n  <Spinner color="grey" text="Grey" />\n  <Spinner color="lightGrey" text="LightGrey" />\n  <Spinner color="red" text="Red" />\n  <Spinner color="orange" text="Orange" />\n  <Spinner color="yellow" text="Yellow" />\n  <Spinner color="green" text="Green" />\n  <Spinner color="teal" text="Teal" />\n  <Spinner color="blue" text="Blue" />\n  <Spinner color="indigo" text="Indigo" />\n  <Spinner color="pink" text="Pink" />\n  <Spinner color="primary" text="Primary" />\n  <Spinner color="success" text="Success" />\n  <Spinner color="warning" text="Warning" />\n  <Spinner color="danger" text="Danger" />\n</div>\n')),Object(a.b)("h3",null,"Spinner overlay"),Object(a.b)("p",null,"A Spinner can overlay it's children when ",Object(a.b)("inlineCode",{parentName:"p"},"spinning")," is set to ",Object(a.b)("inlineCode",{parentName:"p"},"true"),"."),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-js",metastring:"live withRender",live:!0,withRender:!0}),'// import skyline from \'@assets/skyline.jpg\';\n// import bubbles from \'@assets/bubbles.jpg\';\n\nconst Component = () => {\n  const [s1, setS1] = useState(true);\n  const [s2, setS2] = useState(false);\n  return (\n    <Container>\n      <Row gutter={1}>\n        <Col span={12}>\n          <Spinner spinning={s1} size={96} color="primary" text="Loading">\n            <Card>\n              <CardImage src={skyline} />\n              <H3>Title</H3>\n              <P>Card content with a short text containing a description.</P>\n            </Card>\n          </Spinner>\n        </Col>\n        <Col span={12}>\n          <Spinner spinning={s2} size={96} color="primary" delay={200}>\n            <Card>\n              <CardImage src={bubbles} />\n              <H3>Delay</H3>\n              <P>\n                This Spinner will wait for 200ms before showing, this allows to\n                show content without showing just a quickly flashing spinner.\n              </P>\n            </Card>\n          </Spinner>\n        </Col>\n      </Row>\n      <Row gutter={1}>\n        <Col span={12}>\n          <Button buttonType="primary" onClick={() => setS1(!s1)}>\n            Toggle Spinning\n          </Button>\n        </Col>\n        <Col span={12}>\n          <Button buttonType="primary" onClick={() => setS2(!s2)}>\n            Toggle Spinning\n          </Button>\n        </Col>\n      </Row>\n    </Container>\n  );\n};\n\nrender(<Component />);\n')))}c.isMDXComponent=!0}},[["R3+I",0,1,7,5,8,6,2,3,4,9]]]);