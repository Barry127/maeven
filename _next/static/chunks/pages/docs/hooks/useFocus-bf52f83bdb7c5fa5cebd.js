_N_E=(window.webpackJsonp_N_E=window.webpackJsonp_N_E||[]).push([[63],{d5BP:function(n,e,o){"use strict";o.r(e),o.d(e,"default",(function(){return p}));var s=o("wx14"),t=o("Ff2n"),c=o("q1tI"),u=o.n(c),a=o("7ljp"),r=o("9Xuy"),l=(u.a.createElement,{});function p(n){var e=n.components,o=Object(t.a)(n,["components"]);return Object(a.b)("wrapper",Object(s.a)({},l,o,{components:e,mdxType:"MDXLayout"}),Object(a.b)(r.c,{title:"useFocus",mdxType:"Meta"}),Object(a.b)("h1",null,"useFocus"),Object(a.b)("p",null,"useFocus keeps a local state hasFocus based on onFocus and onBlur props for a DOM Element. If given props contain an onFocus or onBlur handler it is wrapped."),Object(a.b)("h2",null,"signature"),Object(a.b)("pre",null,Object(a.b)("code",Object(s.a)({parentName:"pre"},{className:"language-ts"}),"interface FocusEventHandlers<T = Element> {\n  onBlur: FocusEventHandler<T>;\n  onFocus: FocusEventHandler<T>;\n}\n\nfunction useFocus<T = Element>(\n  props: Partial<FocusEventHandlers<T>> = {}\n): [boolean, FocusEventHandlers<T>];\n")),Object(a.b)("h2",null,"Example"),Object(a.b)("p",null,"Use case for useFocus."),Object(a.b)("pre",null,Object(a.b)("code",Object(s.a)({parentName:"pre"},{className:"language-js",metastring:"live withRender",live:!0,withRender:!0}),"const Example = (props) => {\n  const [hasFocus, focusProps] = useFocus(props);\n\n  return (\n    <Card style={hasFocus ? { border: '1px solid var(--mvn-primary)' } : {}}>\n      <P>This card will indicate when the button has focus.</P>\n      <Button {...props} {...focusProps}>\n        Focus Me\n      </Button>\n    </Card>\n  );\n};\n\nrender(\n  <Example\n    onFocus={(ev) => console.log('onFocus', ev.target)}\n    onBlur={(ev) => console.log('onBlur', ev.target)}\n  />\n);\n")))}p.isMDXComponent=!0},yYGv:function(n,e,o){(window.__NEXT_P=window.__NEXT_P||[]).push(["/docs/hooks/useFocus",function(){return o("d5BP")}])}},[["yYGv",0,1,6,4,8,5,2,3,7,9]]]);