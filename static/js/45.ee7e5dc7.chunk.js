(this.webpackJsonpmaeven=this.webpackJsonpmaeven||[]).push([[45],{596:function(e,n,t){"use strict";t.r(n);var r=t(10),a=t(0),l=t.n(a),o=t(580),s=t(5),c=t(581);n.default=function(e){var n=e.components;Object(r.a)(e,["components"]);return l.a.createElement(o.MDXTag,{name:"wrapper",components:n},l.a.createElement(o.MDXTag,{name:"h1",components:n},"AlertGroup"),l.a.createElement(c.a,{of:"AlertGroup"}),l.a.createElement(o.MDXTag,{name:"p",components:n},"AlertGroups are used for app level Alerts at the top of the screen. Alerts inside an AlertGroup are alway closable and cannot have a springConfig."),l.a.createElement(s.Alert,{type:"warning",title:"Warning!",closable:!1},"AlertGroup depends on its children to render correctly. Not unmounting an uncontrolled Alert child of AlertGroup in the afterClose method will result in a corrupted layout!"),l.a.createElement(o.MDXTag,{name:"h2",components:n},"Props"),l.a.createElement(c.d,{of:"AlertGroup"}),l.a.createElement(o.MDXTag,{name:"h2",components:n},"Examples"),l.a.createElement(o.MDXTag,{name:"h3",components:n},"Uncontrolled"),l.a.createElement(o.MDXTag,{name:"p",components:n},"An AlertGroup of uncontrolled Alerts."),l.a.createElement(o.MDXTag,{name:"pre",components:n},l.a.createElement(o.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-js",metaString:"live withRender",live:!0,withRender:!0}},'const Alerts = () => {\n  const [alerts, setAlerts] = useState({\n    a: true,\n    b: true,\n    c: true,\n    d: true\n  });\n\n  const closeAlert = alert => {\n    setAlerts({ ...alerts, [alert]: false });\n  };\n\n  return (\n    <AlertGroup>\n      {alerts.a && (\n        <Alert\n          type="success"\n          title="Alert Title"\n          afterClose={() => closeAlert(\'a\')}\n        >\n          Success Alert\n        </Alert>\n      )}\n      {alerts.b && (\n        <Alert type="info" afterClose={() => closeAlert(\'b\')}>\n          Info Alert\n        </Alert>\n      )}\n      {alerts.c && (\n        <Alert type="warning" afterClose={() => closeAlert(\'c\')}>\n          Warning Alert\n        </Alert>\n      )}\n      {alerts.d && (\n        <Alert\n          type="danger"\n          closable={false}\n          afterClose={() => closeAlert(\'d\')}\n        >\n          Danger Alert (always closable in group)\n        </Alert>\n      )}\n    </AlertGroup>\n  );\n};\n\nrender(<Alerts />);\n')),l.a.createElement(o.MDXTag,{name:"h3",components:n},"Controlled"),l.a.createElement(o.MDXTag,{name:"p",components:n},"An AlertGroup of controlled Alerts."),l.a.createElement(o.MDXTag,{name:"pre",components:n},l.a.createElement(o.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-js",metaString:"live withRender",live:!0,withRender:!0}},'const ControlledGroup = () => {\n  const [showSuccess, setSuccess] = useState(true);\n  const [showInfo, setInfo] = useState(true);\n  const [showWarning, setWarning] = useState(true);\n  const [showDanger, setDanger] = useState(true);\n\n  return (\n    <AlertGroup>\n      <Alert\n        isOpen={showSuccess}\n        onClose={() => {\n          setSuccess(false);\n        }}\n        type="success"\n        title="Alert Title"\n      >\n        Success Alert\n      </Alert>\n      <Alert\n        isOpen={showInfo}\n        onClose={() => {\n          setInfo(false);\n        }}\n        type="info"\n      >\n        Info Alert\n      </Alert>\n      <Alert\n        isOpen={showWarning}\n        onClose={() => {\n          setWarning(false);\n        }}\n        type="warning"\n      >\n        Warning Alert\n      </Alert>\n      <Alert\n        isOpen={showDanger}\n        onClose={() => {\n          setDanger(false);\n        }}\n        type="danger"\n        closable={false}\n      >\n        Danger Alert (always closable in group)\n      </Alert>\n    </AlertGroup>\n  );\n};\n\nrender(<ControlledGroup />);\n')))}}}]);
//# sourceMappingURL=45.ee7e5dc7.chunk.js.map