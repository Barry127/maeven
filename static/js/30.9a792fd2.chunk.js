(this.webpackJsonpmaeven=this.webpackJsonpmaeven||[]).push([[30],{626:function(e,n,t){"use strict";t.r(n);var a=t(9),r=t(0),o=t.n(r),p=t(574),s=(t(5),t(575));n.default=function(e){var n=e.components;Object(a.a)(e,["components"]);return o.a.createElement(p.MDXTag,{name:"wrapper",components:n},o.a.createElement(p.MDXTag,{name:"h1",components:n},"Spinner"),o.a.createElement(s.a,{of:"Spinner"}),o.a.createElement(p.MDXTag,{name:"h2",components:n},"Props"),o.a.createElement(s.d,{of:"Spinner"}),o.a.createElement(p.MDXTag,{name:"h2",components:n},"Examples"),o.a.createElement(p.MDXTag,{name:"h3",components:n},"Basic"),o.a.createElement(p.MDXTag,{name:"p",components:n},"A basic usage of Spinner."),o.a.createElement(p.MDXTag,{name:"pre",components:n},o.a.createElement(p.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-js",metaString:"live",live:!0}},"<Spinner />\n")),o.a.createElement(p.MDXTag,{name:"h3",components:n},"Text"),o.a.createElement(p.MDXTag,{name:"p",components:n},"A spinner can have text."),o.a.createElement(p.MDXTag,{name:"pre",components:n},o.a.createElement(p.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-js",metaString:"live",live:!0}},'<Spinner text="Loading data..." />\n')),o.a.createElement(p.MDXTag,{name:"h3",components:n},"Sizes"),o.a.createElement(p.MDXTag,{name:"p",components:n},"Spinners can have different sizes."),o.a.createElement(p.MDXTag,{name:"pre",components:n},o.a.createElement(p.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-js",metaString:"live",live:!0}},'<Row gutter={1}>\n  <Col transparent span={24}>\n    <Spinner size="sm" text="Small" />\n  </Col>\n  <Col transparent span={24}>\n    <Spinner size="md" text="Medium" />\n  </Col>\n  <Col transparent span={24}>\n    <Spinner size="lg" text="Large" />\n  </Col>\n  <Col transparent span={24}>\n    <Spinner size={100} text="100px" />\n  </Col>\n</Row>\n')),o.a.createElement(p.MDXTag,{name:"h3",components:n},"Color"),o.a.createElement(p.MDXTag,{name:"p",components:n},"Spinners can be styled in different (theme) colors."),o.a.createElement(p.MDXTag,{name:"pre",components:n},o.a.createElement(p.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-js",metaString:"live",live:!0}},'<div style={{ columns: \'4 auto\' }}>\n  <Spinner color="black" text="Black" />\n  <Spinner color="blue" text="Blue" />\n  <Spinner color="cyan" text="Cyan" />\n  <Spinner color="darkGrey" text="DarkGrey" />\n  <Spinner color="green" text="Green" />\n  <Spinner color="grey" text="Grey" />\n  <Spinner color="indigo" text="Indigo" />\n  <Spinner color="orange" text="Orange" />\n  <Spinner color="pink" text="Pink" />\n  <Spinner color="purple" text="Purple" />\n  <Spinner color="red" text="Red" />\n  <Spinner color="teal" text="Teal" />\n  <Spinner color="white" text="White" />\n  <Spinner color="yellow" text="Yellow" />\n  <Spinner color="primary" text="Primary" />\n  <Spinner color="secondary" text="Secondary" />\n  <Spinner color="success" text="Success" />\n  <Spinner color="info" text="Info" />\n  <Spinner color="warning" text="Warning" />\n  <Spinner color="danger" text="Danger" />\n</div>\n')),o.a.createElement(p.MDXTag,{name:"h3",components:n},"Spinner overlay"),o.a.createElement(p.MDXTag,{name:"p",components:n},"A Spinner can overlay it's children when ",o.a.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"spinning")," is set to ",o.a.createElement(p.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"true"),"."),o.a.createElement(p.MDXTag,{name:"pre",components:n},o.a.createElement(p.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-js",metaString:"live withRender",live:!0,withRender:!0}},'// import skyline from \'@assets/skyline.jpg\';\n// import bubbles from \'@assets/bubbles.jpg\';\n\nconst Component = () => {\n  const [s1, setS1] = useState(true);\n  const [s2, setS2] = useState(false);\n  return (\n    <Container>\n      <Row gutter={1}>\n        <Col transparent span={12}>\n          <Card>\n            <Spinner spinning={s1} size={96} color="primary" text="Loading">\n              <CardImage src={skyline} />\n              <H3>Title</H3>\n              <P style={{ paddingBottom: \'var(--maeven-base)\' }}>\n                Card content with a short text containing a description.\n              </P>\n            </Spinner>\n            <P>\n              <Button buttonType="primary" onClick={() => setS1(!s1)}>\n                Toggle Spinning\n              </Button>\n            </P>\n          </Card>\n        </Col>\n        <Col transparent span={12}>\n          <Card>\n            <Spinner spinning={s2} size={96} color="primary" delay={200}>\n              <CardImage src={bubbles} />\n              <H3>Delay</H3>\n              <P style={{ paddingBottom: \'var(--maeven-base)\' }}>\n                This Spinner will wait for 200ms before showing, this allows to\n                show content without showing just a quickly flashing spinner.\n              </P>\n            </Spinner>\n            <P>\n              <Button buttonType="primary" onClick={() => setS2(!s2)}>\n                Toggle Spinning\n              </Button>\n            </P>\n          </Card>\n        </Col>\n      </Row>\n    </Container>\n  );\n};\n\nrender(<Component />);\n')))}}}]);
//# sourceMappingURL=30.9a792fd2.chunk.js.map