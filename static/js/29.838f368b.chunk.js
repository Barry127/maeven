(this.webpackJsonpmaeven=this.webpackJsonpmaeven||[]).push([[29],{611:function(e,n,a){"use strict";a.r(n);var t=a(10),o=a(0),r=a.n(o),m=a(580),s=(a(5),a(581));n.default=function(e){var n=e.components;Object(t.a)(e,["components"]);return r.a.createElement(m.MDXTag,{name:"wrapper",components:n},r.a.createElement(m.MDXTag,{name:"h1",components:n},"TypeAheadInput"),r.a.createElement(s.a,{of:"TypeAheadInput"}),r.a.createElement(m.MDXTag,{name:"h2",components:n},"Props"),r.a.createElement(s.d,{of:"TypeAheadInput"}),r.a.createElement(m.MDXTag,{name:"h2",components:n},"Examples"),r.a.createElement(m.MDXTag,{name:"h3",components:n},"Basic"),r.a.createElement(m.MDXTag,{name:"p",components:n},"A basic usage of TypeAheadInput."),r.a.createElement(m.MDXTag,{name:"pre",components:n},r.a.createElement(m.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-js",metaString:"live",live:!0}},"<TypeAheadInput\n  items={['JavaScript', 'Java', 'PHP', 'Perl', 'C', 'C++', 'Rust', 'Lua']}\n>\n  Start typing...\n</TypeAheadInput>\n")),r.a.createElement(m.MDXTag,{name:"h3",components:n},"Controlled"),r.a.createElement(m.MDXTag,{name:"p",components:n},"A controlled TypeAheadInput."),r.a.createElement(m.MDXTag,{name:"pre",components:n},r.a.createElement(m.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-js",metaString:"live withRender",live:!0,withRender:!0}},"const Controlled = props => {\n  const [value, setValue] = useState('');\n  return (\n    <TypeAheadInput\n      {...props}\n      value={value}\n      onChange={ev => setValue(ev.target.value)}\n    >\n      Value: <i>{value}</i>\n    </TypeAheadInput>\n  );\n};\n\nrender(\n  <Row gutter={1}>\n    <Col transparent>\n      <H4>Controlled input with items as array</H4>\n      <Controlled\n        items={['JavaScript', 'Java', 'PHP', 'Perl', 'C', 'C++', 'Rust', 'Lua']}\n      />\n    </Col>\n    <Col transparent>\n      <H4>Controlled input with items as syncGetItems</H4>\n      <Controlled\n        items={() => [\n          'JavaScript',\n          'Java',\n          'PHP',\n          'Perl',\n          'C',\n          'C++',\n          'Rust',\n          'Lua'\n        ]}\n      />\n    </Col>\n  </Row>\n);\n")),r.a.createElement(m.MDXTag,{name:"h3",components:n},"Async items"),r.a.createElement(m.MDXTag,{name:"p",components:n},"Items can be loaded async."),r.a.createElement(m.MDXTag,{name:"pre",components:n},r.a.createElement(m.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-js",metaString:"live withRender",live:!0,withRender:!0}},"const items = ['JavaScript', 'Java', 'PHP', 'Perl', 'C', 'C++', 'Rust', 'Lua'];\nconst getItems = () =>\n  new Promise(resolve => {\n    setTimeout(() => {\n      resolve(items);\n    }, 500);\n  });\n\nrender(<TypeAheadInput items={getItems} />);\n")))}}}]);
//# sourceMappingURL=29.838f368b.chunk.js.map