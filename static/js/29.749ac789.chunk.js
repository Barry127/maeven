(this.webpackJsonpmaeven=this.webpackJsonpmaeven||[]).push([[29],{616:function(e,n,a){"use strict";a.r(n);var o=a(3),t=a(0),s=a.n(t),r=a(559);a(560);n.default=function(e){var n=e.components;Object(o.a)(e,["components"]);return s.a.createElement(r.MDXTag,{name:"wrapper",components:n},s.a.createElement(r.MDXTag,{name:"h1",components:n},"useFocus"),s.a.createElement(r.MDXTag,{name:"p",components:n},"useFocus keeps a local state ",s.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"hasFocus")," based on ",s.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"onFocus")," and ",s.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"onBlur")," props for a DOM Element. If given props contain an ",s.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"onFocus")," or ",s.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"onBlur")," handler it is wrapped."),s.a.createElement(r.MDXTag,{name:"h2",components:n},"Signature"),s.a.createElement(r.MDXTag,{name:"pre",components:n},s.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-ts",metaString:""}},"interface OptionalFocusHandlers<T = Element> {\n  onBlur?: FocusEventHandler<T>;\n  onFocus?: FocusEventHandler<T>;\n}\n\ninterface FocusEventHandlers<T = Element> {\n  onBlur: FocusEventHandler<T>;\n  onFocus: FocusEventHandler<T>;\n}\n\nfunction useFocus<T = Element>(\n  props: OptionalFocusHandlers<T> = {}\n): [boolean, FocusEventHandlers<T>];\n")),s.a.createElement(r.MDXTag,{name:"h2",components:n},"Example"),s.a.createElement(r.MDXTag,{name:"p",components:n},"Usecase for useFocus."),s.a.createElement(r.MDXTag,{name:"pre",components:n},s.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-js",metaString:"live withRender",live:!0,withRender:!0}},"const Example = props => {\n  const [hasFocus, focusProps] = useFocus(props);\n\n  return (\n    <Card\n      style={\n        hasFocus\n          ? { border: '1px solid dodgerblue' }\n          : { border: '1px solid transparent' }\n      }\n    >\n      <P>This card will indicate when the button has focus.</P>\n      <Button {...props} {...focusProps}>\n        Focus Me\n      </Button>\n    </Card>\n  );\n};\n\nrender(\n  <Example\n    onFocus={ev => console.log('onFocus', ev.target)}\n    onBlur={ev => console.log('onBlur', ev.target)}\n  />\n);\n")))}}}]);
//# sourceMappingURL=29.749ac789.chunk.js.map