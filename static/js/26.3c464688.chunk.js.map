{"version":3,"sources":["../node_modules/.cache/mdx.macro/SaS0L.d2bd3c1475.mdx.js"],"names":["_ref","components","_objectWithoutProperties","React","createElement","MDXTag","name","Description","of","Props","parentName","props"],"mappings":"mGAAA,2DAKgB,mBAAUA,GACxB,IAAIC,EAAaD,EAAKC,WACVC,YAAyBF,EAAM,CAAC,eAE5C,OAAOG,IAAMC,cAAcC,SAAQ,CACjCC,KAAM,UACNL,WAAYA,GACXE,IAAMC,cAAcC,SAAQ,CAC7BC,KAAM,KACNL,WAAYA,GACX,QAASE,IAAMC,cAAcG,IAAa,CAC3CC,GAAI,SACFL,IAAMC,cAAcC,SAAQ,CAC9BC,KAAM,KACNL,WAAYA,GACX,SAAUE,IAAMC,cAAcK,IAAO,CACtCD,GAAI,SACFL,IAAMC,cAAcC,SAAQ,CAC9BC,KAAM,KACNL,WAAYA,GACX,YAAaE,IAAMC,cAAcC,SAAQ,CAC1CC,KAAM,KACNL,WAAYA,GACX,SAAUE,IAAMC,cAAcC,SAAQ,CACvCC,KAAM,IACNL,WAAYA,GACX,0BAA2BE,IAAMC,cAAcC,SAAQ,CACxDC,KAAM,MACNL,WAAYA,GACXE,IAAMC,cAAcC,SAAQ,CAC7BC,KAAM,OACNL,WAAYA,EACZS,WAAY,MACZC,MAAO,CACL,UAAa,cACb,WAAc,kBACd,MAAQ,EACR,YAAc,IAEf,y0DAA00DR,IAAMC,cAAcC,SAAQ,CACv2DC,KAAM,KACNL,WAAYA,GACX,YAAaE,IAAMC,cAAcC,SAAQ,CAC1CC,KAAM,IACNL,WAAYA,GACX,sCAAuCE,IAAMC,cAAcC,SAAQ,CACpEC,KAAM,MACNL,WAAYA,GACXE,IAAMC,cAAcC,SAAQ,CAC7BC,KAAM,OACNL,WAAYA,EACZS,WAAY,MACZC,MAAO,CACL,UAAa,cACb,WAAc,kBACd,MAAQ,EACR,YAAc,IAEf","file":"static/js/26.3c464688.chunk.js","sourcesContent":["import _objectWithoutProperties from \"/home/barry/Documents/projects/maeven/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport React from 'react';\nimport { MDXTag } from '@mdx-js/tag';\nimport { Form } from 'maeven';\nimport { Description, DoDont, Props } from 'docs/components';\nexport default (function (_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return React.createElement(MDXTag, {\n    name: \"wrapper\",\n    components: components\n  }, React.createElement(MDXTag, {\n    name: \"h1\",\n    components: components\n  }, \"Form\"), React.createElement(Description, {\n    of: \"Form\"\n  }), React.createElement(MDXTag, {\n    name: \"h2\",\n    components: components\n  }, \"Props\"), React.createElement(Props, {\n    of: \"Form\"\n  }), React.createElement(MDXTag, {\n    name: \"h2\",\n    components: components\n  }, \"Examples\"), React.createElement(MDXTag, {\n    name: \"h3\",\n    components: components\n  }, \"Basic\"), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, \"A basic usage of Form.\"), React.createElement(MDXTag, {\n    name: \"pre\",\n    components: components\n  }, React.createElement(MDXTag, {\n    name: \"code\",\n    components: components,\n    parentName: \"pre\",\n    props: {\n      \"className\": \"language-js\",\n      \"metaString\": \"live withRender\",\n      \"live\": true,\n      \"withRender\": true\n    }\n  }, \"// import { user, lock } from 'icon-packs/feather';\\n// import { code } from 'icon-packs/devicons';\\n\\nconst options = [\\n  { value: 'JavaScript' },\\n  { value: 'Java' },\\n  { value: 'PHP' },\\n  { value: 'Perl' },\\n  { value: 'C' },\\n  { value: 'Lua' },\\n  { value: 'C++' },\\n  { value: 'Rust' }\\n];\\n\\nconst radioOptions = [\\n  { label: 'Javascript', value: 'js' },\\n  { label: 'Typescript', value: 'ts' },\\n  { label: 'Coffescript', value: 'coffee' }\\n];\\n\\nconst FullForm = () => {\\n  const [tc, setTc] = useState(false);\\n  const [news, setNews] = useState(true);\\n\\n  function toggleAll() {\\n    if (tc && news) {\\n      setTc(false);\\n      setNews(false);\\n    } else {\\n      setTc(true);\\n      setNews(true);\\n    }\\n  }\\n\\n  return (\\n    <Form onSubmit={ev => ev.preventDefault()}>\\n      <FormFieldTextInput label=\\\"Username\\\" icon={user} />\\n      <FormFieldPasswordInput label=\\\"Password\\\" icon={lock} />\\n      <FormFieldSelect label=\\\"Language\\\" options={options} />\\n      <FormFieldRadioGroup\\n        label=\\\"Flavour\\\"\\n        options={radioOptions}\\n        name=\\\"flavour\\\"\\n      />\\n      <FormFieldTextArea label=\\\"Comment\\\" />\\n      <FormField>\\n        <Checkbox\\n          checked={tc && news}\\n          indeterminate={tc !== news}\\n          onChange={toggleAll}\\n        >\\n          Accept All\\n        </Checkbox>\\n        <Checkbox checked={tc} onChange={ev => setTc(ev.target.checked)}>\\n          Accept Terms & Conditions\\n        </Checkbox>\\n        <Checkbox checked={news} onChange={ev => setNews(ev.target.checked)}>\\n          Receive Newsletter\\n        </Checkbox>\\n      </FormField>\\n      <FormField>\\n        <Button type=\\\"submit\\\" buttonType=\\\"primary\\\">\\n          Save\\n        </Button>\\n        <Button type=\\\"reset\\\">Cancel</Button>\\n      </FormField>\\n    </Form>\\n  );\\n};\\n\\nrender(<FullForm />);\\n\")), React.createElement(MDXTag, {\n    name: \"h3\",\n    components: components\n  }, \"Vertical\"), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, \"A form can have a vertical layout.\"), React.createElement(MDXTag, {\n    name: \"pre\",\n    components: components\n  }, React.createElement(MDXTag, {\n    name: \"code\",\n    components: components,\n    parentName: \"pre\",\n    props: {\n      \"className\": \"language-js\",\n      \"metaString\": \"live withRender\",\n      \"live\": true,\n      \"withRender\": true\n    }\n  }, \"// import { user, lock } from 'icon-packs/feather';\\n// import { code } from 'icon-packs/devicons';\\n\\nconst options = [\\n  { value: 'JavaScript' },\\n  { value: 'Java' },\\n  { value: 'PHP' },\\n  { value: 'Perl' },\\n  { value: 'C' },\\n  { value: 'Lua' },\\n  { value: 'C++' },\\n  { value: 'Rust' }\\n];\\n\\nconst radioOptions = [\\n  { label: 'Javascript', value: 'js' },\\n  { label: 'Typescript', value: 'ts' },\\n  { label: 'Coffescript', value: 'coffee' }\\n];\\n\\nconst FullForm = () => {\\n  const [tc, setTc] = useState(false);\\n  const [news, setNews] = useState(true);\\n\\n  function toggleAll() {\\n    if (tc && news) {\\n      setTc(false);\\n      setNews(false);\\n    } else {\\n      setTc(true);\\n      setNews(true);\\n    }\\n  }\\n\\n  return (\\n    <Form onSubmit={ev => ev.preventDefault()} layout=\\\"vertical\\\">\\n      <FormFieldTextInput label=\\\"Username\\\" icon={user} />\\n      <FormFieldPasswordInput label=\\\"Password\\\" icon={lock} />\\n      <FormFieldSelect label=\\\"Language\\\" options={options} />\\n      <FormFieldRadioGroup\\n        label=\\\"Flavour\\\"\\n        options={radioOptions}\\n        name=\\\"flavour\\\"\\n      />\\n      <FormFieldTextArea label=\\\"Comment\\\" />\\n      <FormField>\\n        <Checkbox\\n          checked={tc && news}\\n          indeterminate={tc !== news}\\n          onChange={toggleAll}\\n        >\\n          Accept All\\n        </Checkbox>\\n        <Checkbox checked={tc} onChange={ev => setTc(ev.target.checked)}>\\n          Accept Terms & Conditions\\n        </Checkbox>\\n        <Checkbox checked={news} onChange={ev => setNews(ev.target.checked)}>\\n          Receive Newsletter\\n        </Checkbox>\\n      </FormField>\\n      <FormField>\\n        <Button type=\\\"submit\\\" buttonType=\\\"primary\\\">\\n          Save\\n        </Button>\\n        <Button type=\\\"reset\\\">Cancel</Button>\\n      </FormField>\\n    </Form>\\n  );\\n};\\n\\nrender(<FullForm />);\\n\")));\n});"],"sourceRoot":""}