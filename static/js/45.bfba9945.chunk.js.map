{"version":3,"sources":["../node_modules/.cache/mdx.macro/ZfXeVj.b799dace22.mdx.js"],"names":["_ref","components","_objectWithoutProperties","React","createElement","MDXTag","name","Description","of","Alert","type","title","closable","Props","parentName","props"],"mappings":"mGAAA,2DAKgB,mBAAUA,GACxB,IAAIC,EAAaD,EAAKC,WACVC,YAAyBF,EAAM,CAAC,eAE5C,OAAOG,IAAMC,cAAcC,SAAQ,CACjCC,KAAM,UACNL,WAAYA,GACXE,IAAMC,cAAcC,SAAQ,CAC7BC,KAAM,KACNL,WAAYA,GACX,cAAeE,IAAMC,cAAcG,IAAa,CACjDC,GAAI,eACFL,IAAMC,cAAcC,SAAQ,CAC9BC,KAAM,IACNL,WAAYA,GACX,sJAAuJE,IAAMC,cAAcK,QAAO,CACnLC,KAAM,UACNC,MAAO,WACPC,UAAU,GACT,gLAAiLT,IAAMC,cAAcC,SAAQ,CAC9MC,KAAM,KACNL,WAAYA,GACX,SAAUE,IAAMC,cAAcS,IAAO,CACtCL,GAAI,eACFL,IAAMC,cAAcC,SAAQ,CAC9BC,KAAM,KACNL,WAAYA,GACX,YAAaE,IAAMC,cAAcC,SAAQ,CAC1CC,KAAM,KACNL,WAAYA,GACX,gBAAiBE,IAAMC,cAAcC,SAAQ,CAC9CC,KAAM,IACNL,WAAYA,GACX,yCAA0CE,IAAMC,cAAcC,SAAQ,CACvEC,KAAM,MACNL,WAAYA,GACXE,IAAMC,cAAcC,SAAQ,CAC7BC,KAAM,OACNL,WAAYA,EACZa,WAAY,MACZC,MAAO,CACL,UAAa,cACb,WAAc,kBACd,MAAQ,EACR,YAAc,IAEf,+/BAAkgCZ,IAAMC,cAAcC,SAAQ,CAC/hCC,KAAM,KACNL,WAAYA,GACX,cAAeE,IAAMC,cAAcC,SAAQ,CAC5CC,KAAM,IACNL,WAAYA,GACX,uCAAwCE,IAAMC,cAAcC,SAAQ,CACrEC,KAAM,MACNL,WAAYA,GACXE,IAAMC,cAAcC,SAAQ,CAC7BC,KAAM,OACNL,WAAYA,EACZa,WAAY,MACZC,MAAO,CACL,UAAa,cACb,WAAc,kBACd,MAAQ,EACR,YAAc,IAEf","file":"static/js/45.bfba9945.chunk.js","sourcesContent":["import _objectWithoutProperties from \"/home/barry/Documents/projects/maeven/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport React from 'react';\nimport { MDXTag } from '@mdx-js/tag';\nimport { AlertGroup, Alert } from 'maeven';\nimport { Description, DoDont, Props } from 'docs/components';\nexport default (function (_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return React.createElement(MDXTag, {\n    name: \"wrapper\",\n    components: components\n  }, React.createElement(MDXTag, {\n    name: \"h1\",\n    components: components\n  }, \"AlertGroup\"), React.createElement(Description, {\n    of: \"AlertGroup\"\n  }), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, \"AlertGroups are used for app level Alerts at the top of the screen. Alerts inside an AlertGroup are alway closable and cannot have a springConfig.\"), React.createElement(Alert, {\n    type: \"warning\",\n    title: \"Warning!\",\n    closable: false\n  }, \"AlertGroup depends on its children to render correctly. Not unmounting an uncontrolled Alert child of AlertGroup in the afterClose method will result in a corrupted layout!\"), React.createElement(MDXTag, {\n    name: \"h2\",\n    components: components\n  }, \"Props\"), React.createElement(Props, {\n    of: \"AlertGroup\"\n  }), React.createElement(MDXTag, {\n    name: \"h2\",\n    components: components\n  }, \"Examples\"), React.createElement(MDXTag, {\n    name: \"h3\",\n    components: components\n  }, \"Uncontrolled\"), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, \"An AlertGroup of uncontrolled Alerts.\"), React.createElement(MDXTag, {\n    name: \"pre\",\n    components: components\n  }, React.createElement(MDXTag, {\n    name: \"code\",\n    components: components,\n    parentName: \"pre\",\n    props: {\n      \"className\": \"language-js\",\n      \"metaString\": \"live withRender\",\n      \"live\": true,\n      \"withRender\": true\n    }\n  }, \"const Alerts = () => {\\n  const [alerts, setAlerts] = useState({\\n    a: true,\\n    b: true,\\n    c: true,\\n    d: true\\n  });\\n\\n  const closeAlert = alert => {\\n    setAlerts({ ...alerts, [alert]: false });\\n  };\\n\\n  return (\\n    <AlertGroup>\\n      {alerts.a && (\\n        <Alert\\n          type=\\\"success\\\"\\n          title=\\\"Alert Title\\\"\\n          afterClose={() => closeAlert('a')}\\n        >\\n          Success Alert\\n        </Alert>\\n      )}\\n      {alerts.b && (\\n        <Alert type=\\\"info\\\" afterClose={() => closeAlert('b')}>\\n          Info Alert\\n        </Alert>\\n      )}\\n      {alerts.c && (\\n        <Alert type=\\\"warning\\\" afterClose={() => closeAlert('c')}>\\n          Warning Alert\\n        </Alert>\\n      )}\\n      {alerts.d && (\\n        <Alert\\n          type=\\\"danger\\\"\\n          closable={false}\\n          afterClose={() => closeAlert('d')}\\n        >\\n          Danger Alert (always closable in group)\\n        </Alert>\\n      )}\\n    </AlertGroup>\\n  );\\n};\\n\\nrender(<Alerts />);\\n\")), React.createElement(MDXTag, {\n    name: \"h3\",\n    components: components\n  }, \"Controlled\"), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, \"An AlertGroup of controlled Alerts.\"), React.createElement(MDXTag, {\n    name: \"pre\",\n    components: components\n  }, React.createElement(MDXTag, {\n    name: \"code\",\n    components: components,\n    parentName: \"pre\",\n    props: {\n      \"className\": \"language-js\",\n      \"metaString\": \"live withRender\",\n      \"live\": true,\n      \"withRender\": true\n    }\n  }, \"const ControlledGroup = () => {\\n  const [showSuccess, setSuccess] = useState(true);\\n  const [showInfo, setInfo] = useState(true);\\n  const [showWarning, setWarning] = useState(true);\\n  const [showDanger, setDanger] = useState(true);\\n\\n  return (\\n    <AlertGroup>\\n      <Alert\\n        isOpen={showSuccess}\\n        onClose={() => {\\n          setSuccess(false);\\n        }}\\n        type=\\\"success\\\"\\n        title=\\\"Alert Title\\\"\\n      >\\n        Success Alert\\n      </Alert>\\n      <Alert\\n        isOpen={showInfo}\\n        onClose={() => {\\n          setInfo(false);\\n        }}\\n        type=\\\"info\\\"\\n      >\\n        Info Alert\\n      </Alert>\\n      <Alert\\n        isOpen={showWarning}\\n        onClose={() => {\\n          setWarning(false);\\n        }}\\n        type=\\\"warning\\\"\\n      >\\n        Warning Alert\\n      </Alert>\\n      <Alert\\n        isOpen={showDanger}\\n        onClose={() => {\\n          setDanger(false);\\n        }}\\n        type=\\\"danger\\\"\\n        closable={false}\\n      >\\n        Danger Alert (always closable in group)\\n      </Alert>\\n    </AlertGroup>\\n  );\\n};\\n\\nrender(<ControlledGroup />);\\n\")));\n});"],"sourceRoot":""}